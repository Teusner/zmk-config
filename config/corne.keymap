#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Configure the RGB effects

&led_strip { chain-length = <27>; };

&caps_word { continue-list = <BACKSPACE DELETE N V M H Z>; };

#define TAPPING_TERM 200

/ {
    behaviors {
        /*
    * td_lock groups locking functions into one key:
    *  - tap once to lock the host
    *  - tap twice to put the host to sleep
    */

        td_lock: tap_dance_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LOCK";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM>;
            bindings = <&kp LG(LC(Q))>, <&kp LG(LA(C_EJECT))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        Space {
            bindings = <&kp SPACE>;
            key-positions = <29 28>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        Capslock {
            bindings = <&kp CLCK>;
            key-positions = <5 6>;
        };
    };

    macros {
        git_status: git_status {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp S &kp T &kp A &kp T &kp U &kp S>;
            label = "GIT_STATUS";
        };

        git_commit_all: git_commit_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp I &kp T &kp SPACE &kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE &kp MINUS &kp A &kp MINUS &kp M &kp SPACE &kp DQT &kp DQT &kp LEFT_ARROW>;
            label = "GIT_COMMIT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "BASE";
            bindings = <
&kp TAB    &kp Q     &kp W  &kp E         &kp R      &kp T        &kp Y        &kp U          &kp I      &kp O       &kp P     &kp LBKT
&kp LCTRL  &kp A     &kp S  &kp D         &kp F      &kp G        &kp H        &kp J          &kp K      &kp L       &kp SEMI  &kp APOS
&kp LGUI   &kp NUBS  &kp Z  &kp X         &kp C      &kp V        &kp N        &kp M          &kp COMMA  &kp PERIOD  &kp FSLH  &kp RBKT
                            &mt LALT ESC  &lt 2 DEL  &kp LSHFT    &lt 1 SPACE  &mt RALT BSPC  &kp RET
            >;
        };

        NumSym {
            display-name = "NUMSYM";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp POUND  &kp DLLR       &kp PERCENT    &kp CARET  &kp AMPS   &kp STAR   &kp LPAR  &kp RPAR  &none
&trans  &kp N1    &kp N2  &kp N3     &kp N4         &kp N5         &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &none
&trans  &none     &none   &kp GRAVE  &kp RA(SPACE)  &none          &none      &kp MINUS  &kp EQUAL  &none     &none     &to 3
                          &trans     &trans         &trans         &trans     &trans     &trans
            >;
        };

        NavMouse {
            display-name = "NAVMOUSE";
            bindings = <
&trans  &kp LC(N)     &kp LC(PERIOD)  &kp LC(RBKT)  &kp LC(LS(RBKT))  &kp LC(Y)    &kp C_VOL_UP  &kp PG_UP  &kp UP    &kp PG_DN  &kp C_AL_CALC  &kp C_NEXT
&trans  &kp LC(A)     &kp LC(LBKT)    &kp LC(M)     &kp LC(FSLH)      &kp LC(L)    &kp C_MUTE    &kp LEFT   &kp DOWN  &kp RIGHT  &caps_word     &kp C_PP
&trans  &kp LC(SEMI)  &kp LC(E)       &kp LC(K)     &kp LC(J)         &kp LC(H)    &kp C_VOL_DN  &kp HOME   &kp INS   &kp END    &kp PSCRN      &kp C_PREV
                                      &trans        &trans            &trans       &trans        &trans     &trans
            >;
        };

        GamKeyb {
            display-name = "GAMKEYB";
            bindings = <
&kp TAB    &kp P     &kp V     &kp D    &kp L      &kp J       &bl BL_TOG       &soft_off     &ext_power EP_ON  &ext_power EP_OFF  &none         &bt BT_CLR
&kp LSHFT  &kp A     &kp K     &kp U    &kp Y      &kp N       &rgb_ug RGB_TOG  &to 0         &out OUT_BLE      &out OUT_USB       &none         &none
&kp LCTRL  &kp RBKT  &kp LBKT  &kp M    &kp FSLH   &kp T       &bt BT_NXT       &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3       &bt BT_SEL 4  &none
                               &kp ESC  &kp SPACE  &kp LALT    &none            &none         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
